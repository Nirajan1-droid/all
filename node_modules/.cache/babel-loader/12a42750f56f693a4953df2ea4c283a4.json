{"ast":null,"code":"(function (root, factory) {\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory();\n  } else {\n    root.ImageZoom = factory();\n  }\n})(this, function () {\n  /**\n   * @param {Object} container DOM element, which contains an image to be zoomed (required)\n   * @param {Object} options js-image-zoom options (required)\n   * **width** (number) - width of the source image (optional)\n   * **height** (number) - height of the source image (optional).\n   * **zoomWidth** (number) - width of the zoomed image. Zoomed image height equals source image height (optional)\n   * **img** (string) - url of the source image. Provided if container does not contain img element as a tag (optional)\n   * **scale** (number) - zoom scale. if not provided, scale is calculated as natural image size / image size, provided in params (optional if zoomWidth param is provided)\n   * **offset** (object) - {vertical: number, horizontal: number}. Zoomed image offset (optional)\n   * **zoomContainer** (node) - DOM node reference where zoomedImage will be appended to (default to the container element of image)\n   * **zoomStyle** (string) - custom style applied to the zoomed image (i.e. 'opacity: 0.1;background-color: white;')\n   * **zoomPosition** (string) - position of zoomed image. It can be:  `top`, `left`, `bottom`, `original` or the default `right`.\n   * **zoomLensStyle** (string) custom style applied to to zoom lents (i.e. 'opacity: 0.1;background-color: white;')\n   */\n  return function ImageZoom(container, opts) {\n    \"use strict\";\n\n    var options = opts;\n    if (!container) {\n      return;\n    }\n    var data = {\n      sourceImg: {\n        element: null,\n        width: 0,\n        height: 0,\n        naturalWidth: 0,\n        naturalHeight: 0\n      },\n      zoomedImgOffset: {\n        vertical: 0,\n        horizontal: 0\n      },\n      zoomedImg: {\n        element: null,\n        width: 0,\n        height: 0\n      },\n      zoomLens: {\n        element: null,\n        width: 0,\n        height: 0\n      }\n    };\n    var div = document.createElement('div');\n    var lensDiv = document.createElement('div');\n    var scaleX;\n    var scaleY;\n    var offset;\n    data.zoomedImgOffset = {\n      vertical: options.offset && options.offset.vertical ? options.offset.vertical : 0,\n      horizontal: options.offset && options.offset.horizontal ? options.offset.horizontal : 0\n    };\n    data.zoomPosition = options.zoomPosition || 'right';\n    data.zoomContainer = options.zoomContainer ? options.zoomContainer : container;\n    function getOffset(el) {\n      if (el) {\n        var elRect = el.getBoundingClientRect();\n        return {\n          left: elRect.left,\n          top: elRect.top\n        };\n      }\n      return {\n        left: 0,\n        top: 0\n      };\n    }\n    function leftLimit(min) {\n      return options.width - min;\n    }\n    function topLimit(min) {\n      return options.height - min;\n    }\n    function getValue(val, min, max) {\n      if (val < min) {\n        return min;\n      }\n      if (val > max) {\n        return max;\n      }\n      return val;\n    }\n    function getPosition(v, min, max) {\n      var value = getValue(v, min, max);\n      return value - min;\n    }\n    function zoomLensLeft(left) {\n      var leftMin = data.zoomLens.width / 2;\n      return getPosition(left, leftMin, leftLimit(leftMin));\n    }\n    function zoomLensTop(top) {\n      var topMin = data.zoomLens.height / 2;\n      return getPosition(top, topMin, topLimit(topMin));\n    }\n    function setZoomedImgSize(options, data) {\n      if (options.scale) {\n        data.zoomedImg.element.style.width = options.width * options.scale + 'px';\n        data.zoomedImg.element.style.height = options.height * options.scale + 'px';\n      } else if (options.zoomWidth) {\n        data.zoomedImg.element.style.width = options.zoomWidth + 'px';\n        data.zoomedImg.element.style.height = data.sourceImg.element.style.height;\n      } else {\n        data.zoomedImg.element.style.width = '100%';\n        data.zoomedImg.element.style.height = '100%';\n      }\n    }\n    function onSourceImgLoad() {\n      // use height determined by browser if height is not set in options\n      options.height = options.height || data.sourceImg.element.height;\n      data.sourceImg.element.style.height = options.height + 'px';\n\n      // use width determined by browser if width is not set in options\n      options.width = options.width || data.sourceImg.element.width;\n      data.sourceImg.element.style.width = options.width + 'px';\n      setZoomedImgSize(options, data);\n      data.sourceImg.naturalWidth = data.sourceImg.element.naturalWidth;\n      data.sourceImg.naturalHeight = data.sourceImg.element.naturalHeight;\n      data.zoomedImg.element.style.backgroundSize = data.sourceImg.naturalWidth + 'px ' + data.sourceImg.naturalHeight + 'px';\n      if (options.zoomStyle) {\n        data.zoomedImg.element.style.cssText += options.zoomStyle;\n      }\n      if (options.zoomLensStyle) {\n        data.zoomLens.element.style.cssText += options.zoomLensStyle;\n      } else {\n        data.zoomLens.element.style.background = 'white';\n        data.zoomLens.element.style.opacity = '0.4';\n      }\n      scaleX = data.sourceImg.naturalWidth / options.width;\n      scaleY = data.sourceImg.naturalHeight / options.height;\n      offset = getOffset(data.sourceImg.element);\n\n      // set zoomLens dimensions\n      // if custom scale is set\n      if (options.scale) {\n        data.zoomLens.width = options.width / (data.sourceImg.naturalWidth / (options.width * options.scale));\n        data.zoomLens.height = options.height / (data.sourceImg.naturalHeight / (options.height * options.scale));\n      }\n\n      // else if zoomWidth is set\n      else if (options.zoomWidth) {\n        data.zoomLens.width = options.zoomWidth / scaleX;\n        data.zoomLens.height = options.height / scaleY;\n      }\n\n      // else read from the zoomedImg\n      else {\n        data.zoomedImg.element.style.display = 'block';\n        data.zoomLens.width = data.zoomedImg.element.clientWidth / scaleX;\n        data.zoomLens.height = data.zoomedImg.element.clientHeight / scaleY;\n        data.zoomedImg.element.style.display = 'none';\n      }\n      data.zoomLens.element.style.position = 'absolute';\n      data.zoomLens.element.style.width = data.zoomLens.width + 'px';\n      data.zoomLens.element.style.height = data.zoomLens.height + 'px';\n      data.zoomLens.element.pointerEvents = 'none';\n    }\n    function _setup() {\n      // create sourceImg element\n      if (options.img) {\n        var img = document.createElement('img');\n        img.src = options.img;\n        data.sourceImg.element = container.appendChild(img);\n      }\n\n      // or get sourceImg element from specified container\n      else {\n        data.sourceImg.element = container.children[0];\n\n        // if sourceImg is not an img (might be a picture element), try to find one\n        if (data.sourceImg.element.nodeName !== \"IMG\") {\n          data.sourceImg.element = data.sourceImg.element.querySelector('img');\n        }\n      }\n      options = options || {};\n      container.style.position = 'relative';\n      data.sourceImg.element.style.width = options.width ? options.width + 'px' : 'auto';\n      data.sourceImg.element.style.height = options.height ? options.height + 'px' : 'auto';\n      data.zoomLens.element = container.appendChild(lensDiv);\n      data.zoomLens.element.style.display = 'none';\n      data.zoomLens.element.classList.add('js-image-zoom__zoomed-area');\n      data.zoomedImg.element = data.zoomContainer.appendChild(div);\n      data.zoomedImg.element.classList.add('js-image-zoom__zoomed-image');\n      data.zoomedImg.element.style.backgroundImage = \"url('\" + data.sourceImg.element.src + \"')\";\n      data.zoomedImg.element.style.backgroundRepeat = 'no-repeat';\n      data.zoomedImg.element.style.display = 'none';\n      switch (data.zoomPosition) {\n        case 'left':\n          data.zoomedImg.element.style.position = 'absolute';\n          data.zoomedImg.element.style.top = data.zoomedImgOffset.vertical + 'px';\n          data.zoomedImg.element.style.left = data.zoomedImgOffset.horizontal - data.zoomedImgOffset.horizontal * 2 + 'px';\n          data.zoomedImg.element.style.transform = 'translateX(-100%)';\n          break;\n        case 'top':\n          data.zoomedImg.element.style.position = 'absolute';\n          data.zoomedImg.element.style.top = data.zoomedImgOffset.vertical - data.zoomedImgOffset.vertical * 2 + 'px';\n          data.zoomedImg.element.style.left = 'calc(50% + ' + data.zoomedImgOffset.horizontal + 'px)';\n          data.zoomedImg.element.style.transform = 'translate3d(-50%, -100%, 0)';\n          break;\n        case 'bottom':\n          data.zoomedImg.element.style.position = 'absolute';\n          data.zoomedImg.element.style.bottom = data.zoomedImgOffset.vertical - data.zoomedImgOffset.vertical * 2 + 'px';\n          data.zoomedImg.element.style.left = 'calc(50% + ' + data.zoomedImgOffset.horizontal + 'px)';\n          data.zoomedImg.element.style.transform = 'translate3d(-50%, 100%, 0)';\n          break;\n        case 'original':\n          data.zoomedImg.element.style.position = 'absolute';\n          data.zoomedImg.element.style.top = '0px';\n          data.zoomedImg.element.style.left = '0px';\n          break;\n\n        // Right Position\n        default:\n          data.zoomedImg.element.style.position = 'absolute';\n          data.zoomedImg.element.style.top = data.zoomedImgOffset.vertical + 'px';\n          data.zoomedImg.element.style.right = data.zoomedImgOffset.horizontal - data.zoomedImgOffset.horizontal * 2 + 'px';\n          data.zoomedImg.element.style.transform = 'translateX(100%)';\n          break;\n      }\n\n      // setup event listeners\n      container.addEventListener('mousemove', events, false);\n      container.addEventListener('mouseenter', events, false);\n      container.addEventListener('mouseleave', events, false);\n      data.zoomLens.element.addEventListener('mouseenter', events, false);\n      data.zoomLens.element.addEventListener('mouseleave', events, false);\n      window.addEventListener('scroll', events, false);\n      return data;\n    }\n    function _kill() {\n      // remove event listeners\n      container.removeEventListener('mousemove', events, false);\n      container.removeEventListener('mouseenter', events, false);\n      container.removeEventListener('mouseleave', events, false);\n      data.zoomLens.element.removeEventListener('mouseenter', events, false);\n      data.zoomLens.element.removeEventListener('mouseleave', events, false);\n      window.removeEventListener('scroll', events, false);\n\n      // remove dom nodes\n      if (data.zoomLens && data.zoomedImg) {\n        container.removeChild(data.zoomLens.element);\n        data.zoomContainer.removeChild(data.zoomedImg.element);\n      }\n      if (options.img) {\n        container.removeChild(data.sourceImg.element);\n      } else {\n        data.sourceImg.element.style.width = '';\n        data.sourceImg.element.style.height = '';\n      }\n      return data;\n    }\n    var events = {\n      handleEvent: function handleEvent(event) {\n        switch (event.type) {\n          case 'mousemove':\n            return this.handleMouseMove(event);\n          case 'mouseenter':\n            return this.handleMouseEnter(event);\n          case 'mouseleave':\n            return this.handleMouseLeave(event);\n          case 'scroll':\n            return this.handleScroll(event);\n        }\n      },\n      handleMouseMove: function handleMouseMove(event) {\n        var offsetX;\n        var offsetY;\n        var backgroundTop;\n        var backgroundRight;\n        var backgroundPosition;\n        if (offset) {\n          offsetX = zoomLensLeft(event.clientX - offset.left);\n          offsetY = zoomLensTop(event.clientY - offset.top);\n          backgroundTop = offsetX * scaleX;\n          backgroundRight = offsetY * scaleY;\n          backgroundPosition = '-' + backgroundTop + 'px ' + '-' + backgroundRight + 'px';\n          data.zoomedImg.element.style.backgroundPosition = backgroundPosition;\n          data.zoomLens.element.style.cssText += 'top:' + offsetY + 'px;' + 'left:' + offsetX + 'px;display: block;';\n        }\n      },\n      handleMouseEnter: function handleMouseEnter() {\n        data.zoomedImg.element.style.display = 'block';\n        data.zoomLens.element.style.display = 'block';\n      },\n      handleMouseLeave: function handleMouseLeave() {\n        data.zoomedImg.element.style.display = 'none';\n        data.zoomLens.element.style.display = 'none';\n      },\n      handleScroll: function handleScroll() {\n        offset = getOffset(data.sourceImg.element);\n      }\n    };\n\n    // Setup/Initialize library\n    _setup();\n    if (data.sourceImg.element.complete) {\n      onSourceImgLoad();\n    } else {\n      data.sourceImg.element.onload = onSourceImgLoad;\n    }\n    return {\n      setup: function setup() {\n        _setup();\n      },\n      kill: function kill() {\n        _kill();\n      },\n      _getInstanceInfo: function _getInstanceInfo() {\n        return {\n          setup: _setup,\n          kill: _kill,\n          onSourceImgLoad: onSourceImgLoad,\n          data: data,\n          options: options\n        };\n      }\n    };\n  };\n});","map":null,"metadata":{},"sourceType":"script"}